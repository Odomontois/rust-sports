#[cfg(test)]
use rand::{thread_rng, RngCore};
#[cfg(test)]
use std::iter::repeat_with;

use std::cmp::Ordering::{Greater, Less};

pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {
    let k = k as usize;
    let left = || nums[..k].iter().rev();
    let right = &nums[k + 1..];
    best_score(nums[k], right, left())
        .max(best_score(nums[k], left(), right))
        .max(nums[k])
}

pub fn naive_score(nums: &[i32], k: i32) -> i32 {
    (0..=k as usize)
        .flat_map(|i| {
            (k as usize..nums.len()).map(move |j| {
                let sl = &nums[i..=j];
                sl.iter().min().copied().unwrap_or(0) * sl.len() as i32
            })
        })
        .max()
        .unwrap_or(0)
}

fn minimums<'a, A: Ord + Copy + 'a>(start: A, xs: impl IntoIterator<Item = &'a A>) -> impl Iterator<Item = A> {
    xs.into_iter().copied().scan(start, |min, x| {
        *min = x.min(*min);
        Some(*min)
    })
}

fn scores<A: Ord + Copy>(xs: impl Iterator<Item = A>, ys: impl Iterator<Item = A>) -> impl Iterator<Item = (A, usize)> {
    let xv: Vec<_> = xs.into_iter().collect();
    let pos = move |y| {
        xv.binary_search_by(|&x| if x < y { Greater } else { Less })
            .unwrap_err()
    };
    ys.into_iter().enumerate().map(move |(i, y)| (y, i + 2 + pos(y)))
}

fn best_score<'a>(start: i32, xs: impl IntoIterator<Item = &'a i32>, ys: impl IntoIterator<Item = &'a i32>) -> i32 {
    let s = scores(minimums(start, xs), minimums(start, ys));
    s.into_iter().map(|(x, n)| x * n as i32).max().unwrap_or(0)
}

#[test]
fn test() {
    assert_eq!(
        maximum_score(vec![6569, 9667, 3148, 7698, 1622, 2194, 793, 9041, 1670, 1872], 5),
        9732
    );

    assert_eq!(maximum_score(vec![1, 4, 3, 7, 4, 5], 3), 15);
    assert_eq!(maximum_score(vec![5, 5, 4, 5, 4, 1, 1, 1], 0), 20);
    assert_eq!(maximum_score(vec![4, 8, 8, 8, 8], 3), 32);
    assert_eq!(
        maximum_score(
            vec![
                529, 7655, 4113, 7929, 7745, 6149, 2691, 435, 7858, 978, 5467, 8761, 2881, 4175, 359, 9711, 7157, 1740,
                5214, 7660, 1113, 614, 4077, 2859, 2954, 1170, 3997, 4526, 2771, 4046, 3174, 7126, 3866, 7603, 5596,
                9587, 1826, 9228, 9983, 2487, 7018, 1130, 1299, 1389, 5914, 2926, 5679, 5781, 5770, 8705, 9053, 3449,
                9893, 6042, 4349, 2008, 2959, 9730, 5639, 8813, 5206, 747, 460, 149, 2553, 4006, 2012, 8966, 2245,
                2635, 9089, 7962, 5879, 9785, 1069, 7122, 7926, 9546, 4557, 5719, 6926, 2353, 1887, 2744, 2240, 472,
                7559, 824, 4320, 8267, 7210, 4764, 8368, 3071, 8973, 7849, 8704, 2375, 5130, 5092, 8311, 6147, 7692,
                6794, 8280, 4863, 4932, 4863, 946, 4243, 7307, 5061, 3752, 426, 6352, 1978, 818, 5604, 3306, 9034,
                9805, 7900, 8462, 4473, 1914, 8449, 113, 8566, 7671, 9518, 693, 730, 8064, 2004, 9584, 8725, 4392, 468,
                3013, 502, 6472, 4185, 6380, 471, 4258, 3424, 8435, 7470, 5109, 7228, 486, 8925, 3130, 1574, 4454,
                9048, 5824, 679, 5364, 3804, 5143, 6714, 5695, 2806, 7653, 9153, 26, 3195, 2856, 4303, 6914, 270, 9011,
                3325, 7835, 1770, 8668, 3395, 1756, 6702, 743, 2618, 6841, 7492, 6068, 9150, 8852, 5004, 9610, 6716,
                7053, 4937, 6209, 2772, 4454, 3988, 432, 8097, 9400, 3194, 5565, 6266, 2821, 4769, 5019, 164, 443,
                8620, 695, 8173, 7705, 5081, 1376, 6573, 9364, 7328, 2513, 8020, 2361, 4915, 5346, 7410, 2379, 5538,
                7560, 9431, 1049, 9069, 9616, 9368, 3998, 3240, 8006, 3177, 4380, 794, 8668, 4685, 3456, 2257, 2645,
                7269, 2424, 5209, 4198, 3086, 6821, 7598, 3764, 7505, 6191, 9018, 7019, 338, 5606, 1484, 1962, 1415,
                8423, 6988, 9140, 8305, 6196, 2299, 3397, 8634, 3855, 2139, 4924, 7102, 4662, 6713, 1056, 5418, 5982,
                940, 3149, 9245, 637, 8873, 7651, 2975, 6447, 5539, 291, 9119, 7773, 9287, 4286, 858, 9111, 5012, 9499,
                1595, 4408, 918, 5742, 5134, 9475, 8427, 9556, 8422, 4825, 9747, 522, 266, 9267, 7351, 5413, 7374,
                8556, 8014, 6194, 6076, 3011, 1612, 217, 6101, 7673, 5623, 6757, 5038, 2615, 3711, 8296, 7453, 408,
                868, 4090, 1038, 6549, 7307, 7886, 3571, 6450, 1947, 5236, 8943, 5827, 1325, 1278, 9292, 1930, 7778,
                6039, 3935, 623, 7886, 256, 1194, 833, 4219, 3641, 1047, 2543, 4442, 9242, 150, 8148, 1460, 9650, 5882,
                9647, 431, 7709, 714, 6345, 6104, 3240, 6151, 6310, 7220, 216, 6452, 3271, 3368, 1247, 7870, 8492,
                2124, 1932, 3524, 5515, 2911, 8798, 7242, 1019, 8154, 3942, 5654, 5994, 8323, 449, 1914, 5680, 2821,
                8399, 1904, 6356, 8538, 298, 7418, 2339, 1672, 2948, 584, 4877, 2702, 36, 8044, 1528, 3815, 799, 8865,
                7043, 5846, 3204, 4238, 3012, 2060, 8169, 9422, 8049, 8871, 1517, 819, 6066, 4821, 7262, 6131, 9774,
                9210, 9683, 338, 3573, 3812, 4398, 5022, 1313, 9705, 792, 3644, 3397, 529, 8340, 2683, 524, 5635, 6653,
                9852, 8619, 39, 6060, 4273, 3026, 7680, 6861, 4470, 8, 4094, 4720, 388, 9344, 7749, 394, 3603, 8406,
                8713, 9328, 4423, 3074, 9966, 694, 4094, 3627, 6926, 3558, 4322, 1720, 3814, 7277, 5770, 7077, 9871,
                7872, 4016, 1196, 7425, 8843, 8631, 2500, 142, 991, 9472, 1603, 7433, 2955, 5213, 3083, 9960, 3993,
                8940, 2675, 5442, 8308, 6653, 2105, 4640, 2020, 8924, 8918, 2949, 4949, 5442, 9580, 2811, 5205, 7078,
                9779, 5049, 4455, 3420, 5586, 6315, 1629, 101, 5384, 4917, 7629, 2731, 8121, 2852, 9260, 8445, 2896,
                8075, 4667, 2164, 7085, 3616, 3177, 9104, 5318, 8728, 2332, 3943, 2388, 4352, 8537, 199, 1655, 3881,
                7058, 3912, 7027, 5721, 9737, 6031, 3265, 2699, 8285, 7835
            ],
            314
        ),
        36150
    );
    assert_eq!(
        maximum_score(
            vec![
                4730, 7741, 2634, 8322, 9420, 3287, 4054, 6161, 5303, 4604, 4381, 7261, 6991, 9216, 6915, 5573, 9330,
                6603, 8706, 2338, 6339, 8070, 4783, 6585, 2364, 8744, 7988, 7782, 2337, 4346, 4035, 2759, 3976, 932,
                1892, 6765, 3044, 3649, 6944, 8985, 1271, 2165, 8154, 8130, 9975, 248, 7748, 423, 7845, 9622, 4067,
                742, 7980, 5598, 4851, 3579, 6613, 3259, 552, 2969, 7874, 5469, 9185, 331, 2615, 6219, 7412, 8416,
                5527, 4026, 1618, 1207, 8872, 1355, 3298, 6002, 8519, 9554, 3733, 4655, 1416, 2376, 3208, 9621, 2874,
                8316, 4091, 5207, 8007, 3814, 105, 6516, 812, 9848, 4715, 2864, 5605, 6980, 5369, 591, 1388, 4483,
                4940, 6008, 7942, 3846, 469, 2357, 7112, 4637, 1506, 9637, 7178, 358, 7589, 6533, 825, 70, 9497, 9826,
                1473, 2101, 1866, 251, 2913, 1021, 417, 1380, 7664, 174, 8400, 8209, 8530, 2545, 891, 1424, 1623, 5633,
                2375, 946, 2507, 4390, 6826, 1430, 639, 737, 3432, 9629, 8348, 18, 3899, 8968, 2019, 2510, 9795, 3671,
                1915, 758, 4061, 6732, 7088, 3600, 7960, 1844, 8521, 345, 6457, 9771, 6983, 9124, 4701, 4006, 9405,
                5308, 4945, 8031, 1202, 6652, 4110, 6122, 3951, 3456, 694, 6806, 953, 3594, 951, 9184, 1543, 9843,
                1825, 4161, 9497, 6122, 6197, 5997, 1682, 2937, 8162, 440, 401, 1416, 8422, 4407, 755, 245, 4599, 829,
                9688, 1783, 5131, 6378, 9708, 7842, 2012, 4282, 1372, 5945, 981, 6732, 7452, 1865, 5264, 3819, 9909,
                8785, 4059, 200, 5226, 5506, 6212, 7358, 1692, 2704, 5122, 2591, 6691, 7254, 3569, 5605, 6025, 2907,
                8666, 8593, 7889, 5343, 3784, 9299, 9998, 5580, 9854, 4258, 7154, 7849, 8589, 3751, 7463, 4077, 5301,
                2063, 6673, 2293, 5631, 9449, 5590, 3035, 3628, 8475, 7278, 1636, 6157, 5367, 3481, 7096, 493, 3727,
                8831, 5454, 1115, 2910, 7212, 3392, 7181, 8709, 8268, 7379, 4144, 7861, 1657, 5169, 1857, 198, 7252,
                7891, 6176, 2842, 9943, 4256, 7822, 4579, 5148, 7825, 1300, 2175, 8090, 2092, 1679, 1805, 2802, 9609,
                7129, 3347, 5247, 4435, 8051, 2860, 9048, 6651, 9386, 3677, 4020, 5260, 5343, 3616, 9140, 5892, 7191,
                8644, 7594, 434, 3158, 2819, 1098, 5119, 9810, 6498, 8403, 6179, 2404, 5692, 7581, 4604, 1794, 4273,
                1372, 690, 8539, 4543, 8773, 9168, 1905, 6426, 2815, 9545, 3142, 544, 1231, 527, 1791, 5560, 2810,
                6665, 9260, 5930, 6651, 7393, 2217, 7160, 8432, 7723, 8811, 9961, 7545, 205, 8498, 3414, 8138, 1397,
                1649, 4915, 5836, 9133, 4293, 4200, 3877, 8092, 8034, 6374, 8067, 6354, 4003, 9703, 8374, 2426, 7000,
                1344, 8258, 7189, 8604, 5724, 687, 5081, 6692, 5940, 3278, 872, 5224, 3111, 9866, 229, 8202, 5310,
                4755, 5440, 6913, 7679, 1606, 4272, 5291, 6007, 3061, 6969, 5160, 8121, 3239, 9540, 1799, 7686, 3394,
                9451, 9376, 6923, 3109, 3305, 1970, 2413, 5180, 6174, 3956, 4805, 8567, 1004, 7646, 4625, 7466, 2135,
                914, 2506, 8966, 8038, 9471, 2418, 780, 4277, 5238, 9654, 3885, 8793, 8546, 449, 9326, 5044, 5438,
                3793, 5602, 446, 9588, 5905, 5556, 9374, 8604, 6330, 2241, 5055, 1558, 3419, 7211, 4777, 3156, 704,
                4118, 1071, 8965, 7544, 8305, 1311, 8704, 8232, 9513, 7140, 8431, 213, 581, 5541, 659, 5594, 972, 5059,
                5464, 2989, 1813, 4409, 7435, 8846, 8202, 329, 1470, 2720, 9937, 8036, 522, 4504, 6518, 7127, 6588,
                1754, 4634, 848, 3619, 9737, 4047, 2137, 7997, 2917, 3578, 8892, 6756, 6291, 6338, 8095, 1336, 5204,
                5259, 6515, 4280, 4492, 5781, 4535, 5639, 6161, 2699, 3844, 331, 1025, 6329, 9122, 4556, 2096, 8459,
                5413, 9520
            ],
            291
        ),
        79398
    );
}

#[test]
fn find() {
    let mut random = thread_rng();
    for _ in 0..1 {
        let xs: Vec<_> = repeat_with(|| (random.next_u32() % 10) as i32).take(5).collect();
        let k = (random.next_u32() % 5) as i32;
        println!("{:?} {:?}", xs, k);
        assert_eq!(naive_score(&xs, k), maximum_score(xs.clone(), k), "{:?}", xs)
    }
}

#[test]
fn check() {
    let bb = vec![3, 3, 2, 2, 1, 1];
    for y in 0..5 {
        println!(
            "{} {:?}",
            y,
            bb.binary_search_by(|&x| if x < y { Greater } else { Less })
        )
    }

    let bb = vec![8];
    println!(
        "{} {:?}",
        8,
        bb.binary_search_by(|&x| if x < 8 { Greater } else { Less })
    )
}
